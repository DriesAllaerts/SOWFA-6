#!/bin/bash
#SBATCH --job-name=runTerrain
#SBATCH --output foam2run_startAt0.log
#SBATCH --ntasks=576        # Change on setUp as well
#SBATCH --time=1-00
#SBATCH --account=car
#SBATCH --qos=high

source $HOME/.bash_profile
cores=$SLURM_NTASKS

echo "Working directory is" $SLURM_SUBMIT_DIR
echo "Job name is" $SLURM_JOB_NAME
echo "Submit time is" $(squeue -u $USER -o '%30j %20V' | grep -e $SLURM_JOB_NAME | awk '{print $2}')
echo "Starting OpenFOAM job at: " $(date)
echo "using" $cores "core(s)"

# ******************************************** USER INPUT ******************************************** #
OpenFOAM-6-gcc-dev 	        # OpenFOAM/SOWFA version. OpenFOAM-6-{gcc,intel}-{central,dev}
startTime=0                     # Start time (cp script for restarted runs)
stabState=neutral               # neutral, stable, unstable
solver=superDeliciousVanilla
initializer=none                # setFieldsABL, none
bc=inflowOutflow                # inflowOutflow, boundaryData, cyclic, wrf
interp=midpoint                 # midpoint, linearupwind. divSchemes midpoint needed for gravity waves
# **************************************************************************************************** #

# **************************************** PERFORM SOME CHECKS *************************************** #
if [ ! -f foam1preprocess.log ];                                        then echo "Job killed (1)."; scancel $SLURM_JOBID; fi
if [ ! -f system/controlDict.$solver.startAt$startTime ];               then echo "Job killed (2)."; scancel $SLURM_JOBID; fi
if [ $initializer = setFieldsABL ] && [ ! -f system/setFieldsABLDict ]; then echo "Job killed (4)."; scancel $SLURM_JOBID; fi
if [ ! -f setUp ];                                                      then echo "Job killed (5)."; scancel $SLURM_JOBID; fi
# **************************************************************************************************** #

# ************************************ COPYING APPROPRIATE FILES ************************************* #
cp system/controlDict.$solver.startAt$startTime        system/controlDict
cp system/fvSolution.flow                              system/fvSolution
cp system/fvSchemes.flow.$interp                       system/fvSchemes
endTimeMesh=$(foamListTimes -processor -latestTime | tail -1)

case $(foamDictionary -entry "windDir" -value setUp) in
  0|360)                    inflowDir=north;;
  [1-9]|[1-8][0-9])         inflowDir=northeast;;
  90)                       inflowDir=east;;
  9[1-9]|1[0-7][0-9])       inflowDir=southeast;;
  180)                      inflowDir=south;;
  1[8-9][0-9]|2[0-6][0-9])  inflowDir=southwest;;
  270)                      inflowDir=west;;
  2[7-9][0-9]|3[0-5][0-9])  inflowDir=northwest;;
  *)                        echo "Job killed (5)"; scancel $SLURM_JOBID;;
esac
# **************************************************************************************************** #

# If not a restarted run, adjust the starting time to be $startTime, and not $endTimeMesh
if [ ! -f log.2.$solver.startAt0 ]; then
    for (( c=0; c<$cores; c++)); do
         mv processor$c/$endTimeMesh/polyMesh processor$c/$startTime/
         mv processor$c/$startTime processor$c/temp
         find processor$c -mindepth 1 -type d -not -path "*constant*" -not -path "*temp*" -exec rm -rf {} +
         mv processor$c/temp processor$c/$startTime
    done	
fi

# Run the flow field initializer
if [ $initializer = setFieldsABL ] && [ ! -f log.2.$initializer ];  then
   srun -n $cores --cpu_bind=cores $initializer -parallel > log.2.$initializer 2>&1
fi

# Change BCs depending on the inflowDir and BC type
if [ $bc = boundaryData ] || [ $bc = wrf ]; then
    changeDictionary -dict system/changeDictionaryDict.timeVarying.$inflowDir -time $startTime -enableFunctionEntries > log.2.changeDictionary.timeVarying.$inflowDir 2>&1
elif [ $bc = cyclic ]; then
    changeDictionary -dict system/changeDictionaryDict.cyclic -time $startTime -enableFunctionEntries > log.2.changeDictionary.cyclic 2>&1
elif [ $bc = inflowOutflow ]; then
    changeDictionary -dict system/changeDictionaryDict.inflowOutflow.$inflowDir -time $startTime -enableFunctionEntries > log.2.changeDictionary.inflowOutflow.$inflowDir 2>&1
fi 

# if convective, change the bottom BC too
if [ $stabState = unstable ] || [ $stabState = stable ]; then
   # changeDictionary -dic system/changeDictionary.updateBC.lower -time $startTime -enableFunctionEntries > log.2.changeDictionary.lower 2>&1
fi

# Run the solver
srun -n $cores --cpu_bind=cores $solver -parallel > log.2.$solver.startAt$startTime 2>&1

# Get some quantities from the logfile
grep -e "maximum"  -e "^Time =" log.2.$solver.startAt$startTime | awk ' NR%2 {printf "%.4f    \t", $3}  !(NR%2) {printf "%.4e \n", $2}' > log.maxlocalerror
grep -e "total - flux"  -e "^Time =" log.2.$solver.startAt$startTime | awk ' NR%2 {printf "%.4f    \t", $3}  !(NR%2) {printf "%.4e \n", $4}'  > log.totalboundaryflux


echo "Ending OpenFOAM job at: " $(date)

# **************************************************************************************************** #
