#!/bin/bash
#SBATCH --job-name=rTerrain
#SBATCH --output foam2run_startAt0.log
#SBATCH --ntasks=576        # Change on setUp as well
#SBATCH --time=1-00
#SBATCH --account=car
#SBATCH --qos=high

source $HOME/.bash_profile
cores=$SLURM_NTASKS

echo "Working directory is" $SLURM_SUBMIT_DIR
echo "Job name is" $SLURM_JOB_NAME
echo "Submit time is" $(squeue -u $USER -o '%30j %20V' | grep -e $SLURM_JOB_NAME | awk '{print $2}')
echo "Starting OpenFOAM job at: " $(date)
echo "using" $cores "core(s)"

# ******************************************** USER INPUT ******************************************** #
OpenFOAM-6-gcc-dev 	        # OpenFOAM/SOWFA version. OpenFOAM-6-{gcc,intel}-{central,dev}
startTime=0                     # Start time (cp script for restarted runs)
startTimeAvg=5000                # Start time for computing averages
                                # The writeInterval should be a multiple of startTimeAvg
# h=40                            # 100,40.  For bump cases.
# cp system/sampling/slicesBump.h$h                      system/sampling/slicesBump
stabState=neutral               # neutral, stable, unstable
solver=superDeliciousVanilla
#bc=inflowOutflow                # inflowOutflow, boundaryData, cyclic, wrf
interp=midpoint                 # midpoint, linearupwind. divSchemes midpoint needed for gravity waves

#initializer=none                # precursor, setFieldsABL, none. If precursor, set precursorDir, mapTime
#precursorDir=~/OpenFOAM/rthedin-6/run/SOWFA-setups/tut.ABLflatTerrain.precursor
#mapTime=20000                   # set if initializer=precursor
# if initializer=precursor, startTime=mapTime

# **************************************************************************************************** #

# **************************************** PERFORM SOME CHECKS *************************************** #
if [ ! -f foam1preprocess.log ];                                        then echo "Job killed (1)."; scancel $SLURM_JOBID; fi
if [ ! -f system/controlDict.$solver.startAt$startTime ];               then echo "Job killed (2)."; scancel $SLURM_JOBID; fi
#if [ $initializer = setFieldsABL ] && [ ! -f system/setFieldsABLDict ]; then echo "Job killed (4)."; scancel $SLURM_JOBID; fi
if [ ! -f setUp ];                                                      then echo "Job killed (5)."; scancel $SLURM_JOBID; fi
if [ $startTimeAvg -le $startTime ];                                    then echo "Job killed (6)."; scancel $SLURM_JOBID; fi

endTime=$(foamDictionary -entry "endTime" -value system/controlDict.$solver.startAt$startTime)
writeInterval=$(foamDictionary -entry "writeInterval" -value system/controlDict.$solver.startAt$startTime)
if [ $startTimeAvg -ge $endTime ];                        then echo "Job killed (7)"; scancel $SLURM_JOBID; fi
if [ $writeInterval -gt $startTimeAvg ];                  then echo "Job killed (8)"; scancel $SLURM_JOBID; fi 
if [ $(echo "$startTimeAvg%$writeInterval" | bc) -ne 0 ]; then echo "Job killed (9)"; scancel $SLURM_JOBID; fi
# **************************************************************************************************** #

# ***************************** COPY APPROPRIATE FILES AND SET VARIABLES ***************************** #
cp system/controlDict.$solver.startAt$startTime        system/controlDict
cp system/fvSolution.flow                              system/fvSolution
cp system/fvSchemes.flow.$interp                       system/fvSchemes
#endTimeMesh=$(foamListTimes -processor -latestTime | tail -1)

# case $(foamDictionary -entry "windDir" -value setUp) in
#   0|360)                    inflowDir=north;;
#   [1-9]|[1-8][0-9])         inflowDir=northeast;;
#   90)                       inflowDir=east;;
#   9[1-9]|1[0-7][0-9])       inflowDir=southeast;;
#   180)                      inflowDir=south;;
#   1[8-9][0-9]|2[0-6][0-9])  inflowDir=southwest;;
#   270)                      inflowDir=west;;
#   2[7-9][0-9]|3[0-5][0-9])  inflowDir=northwest;;
#   *)                        echo "Job killed (5)"; scancel $SLURM_JOBID;;
# esac
# **************************************************************************************************** #

# done on the first script
# # Change BCs depending on the inflowDir and BC type
# if [ $bc = boundaryData ] || [ $bc = wrf ]; then
#     srun -n $cores changeDictionary -dict system/changeDictionaryDict.timeVarying.$inflowDir -time $startTime -enableFunctionEntries -parallel -subDict dictionaryReplacement > log.2.changeDictionary.timeVarying.$inflowDir 2>&1
# elif [ $bc = inflowOutflow ]; then
#     srun -n $cores changeDictionary -dict system/changeDictionaryDict.inflowOutflow.$inflowDir -time $startTime -enableFunctionEntries -parallel -subDict dictionaryReplacement > log.2.changeDictionary.inflowOutflow.$inflowDir 2>&1
# fi

# Split run to get to developed-flow stage
foamDictionary -entry "fieldAverages.enabled" -set "false" system/sampling/fieldAverages
foamDictionary -entry "temporalAverages.enabled" -set "false" system/sampling/temporalAverages
foamDictionary -entry "endTime" -set $startTimeAvg -disableFunctionEntries system/controlDict
srun -n $cores --cpu_bind=cores $solver -parallel > log.2.$solver.startAt$startTime 2>&1

# Split run to save averages
foamDictionary -entry "fieldAverages.timeStart" -set $startTimeAvg system/sampling/fieldAverages
foamDictionary -entry "fieldAverages.enabled" -set "true" system/sampling/fieldAverages
foamDictionary -entry "temporalAverages.timeStart" -set $startTimeAvg system/sampling/temporalAverages
foamDictionary -entry "temporalAverages.enabled" -set "true" system/sampling/temporalAverages
foamDictionary -entry "startTime" -set $startTimeAvg -disableFunctionEntries system/controlDict
foamDictionary -entry "endTime" -set $endTime -disableFunctionEntries system/controlDict 
srun -n $cores --cpu_bind=cores $solver -parallel > log.2.$solver.startAt$startTimeAvg 2>&1

# Get some quantities from the logfile
grep -e "maximum"  -e "^Time =" log.2.$solver.startAt$startTime | awk ' NR%2 {printf "%.4f    \t", $3}  !(NR%2) {printf "%.4e \n", $2}' > log.maxlocalerror
grep -e "total - flux"  -e "^Time =" log.2.$solver.startAt$startTime | awk ' NR%2 {printf "%.4f    \t", $3}  !(NR%2) {printf "%.4e \n", $4}' > log.totalboundaryflux
grep -e "maximum"  -e "^Time =" log.2.$solver.startAt$startTimeAvg | awk ' NR%2 {printf "%.4f    \t", $3}  !(NR%2) {printf "%.4e \n", $2}' >> log.maxlocalerror
grep -e "total - flux"  -e "^Time =" log.2.$solver.startAt$startTimeAvg | awk ' NR%2 {printf "%.4f    \t", $3}  !(NR%2) {printf "%.4e \n", $4}' >> log.totalboundaryflux

echo "Ending OpenFOAM job at: " $(date)

# **************************************************************************************************** #
